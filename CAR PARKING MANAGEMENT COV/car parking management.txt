module car_parking_management(
    input clk, rst, sense_entry, sense_exit,
    input [1:0] password_1, password_2,
    output reg green_light, red_light,
    output reg [6:0] hex_1, hex_2,
    output reg [3:0] space_available, space_utilized, count_cars
    );

    reg [3:0] overall_space=4'b1000;
    reg [2:0] current_state, next_state;
    reg [1:0] wait_time;

    parameter idle = 3'b000,
              wait_time_state=3'b001,
              password_correct=3'b010,
              password_incorrect=3'b011,
              stop=3'b100;

    always@(posedge clk) begin
        if(rst==1) current_state<= idle;
        else current_state<= next_state;
    end

    always@(posedge clk) begin
   
        if(rst==1) begin
            space_available<= overall_space;
            space_utilized<= 0;
            count_cars<=4'b0;
        end
       
        else begin
            if ((sense_entry==1) && (space_available>0))begin //entry of 1 vehicle
                space_available<= space_available - 3'b001;
                space_utilized<= space_utilized + 3'b001;
                count_cars<=count_cars + 4'b0001;
            end
           
            else if ((sense_exit==1) && (space_utilized>0)) begin //exit of 1 vehicle
                space_available<= space_available + 3'b001;
                space_utilized<= space_utilized - 3'b001;
                count_cars<= count_cars - 4'b0001;
            end
           
            else begin                 space_available<= overall_space;
                space_utilized<= 0;
                count_cars<=4'b0;
            end
        end
    end

    always@(posedge clk) begin
   
        if(rst==1) wait_time<= 2'b0;
       
        else begin
            if(current_state==wait_time_state) wait_time<= wait_time + 2'b01;
            else wait_time<= 2'b0;
        end
    end

    always@(*) begin
    case(current_state)
       
        idle: begin
            if((sense_entry==1) && (space_available>0)) next_state<= wait_time_state;
            else next_state<= idle;
        end
   
        wait_time_state: begin
            if(wait_time<= 3'b011) next_state<= wait_time_state;
            else begin
                if ((password_1==2'b01) && (password_2==2'b01)) next_state<= password_correct;
                else next_state<= password_incorrect;
            end
        end
   
        password_correct: begin
            if((sense_entry==1) && (sense_exit==1)) next_state<= stop;
            else if((sense_exit==1)) next_state<= idle;
            else next_state<= password_correct;
        end
   
        password_incorrect: begin
            if((password_1==2'b01) && (password_2==2'b01)) next_state<= password_correct;
            else next_state<= password_incorrect;
        end
   
        stop: begin
            if((password_1==2'b01) && (password_2==2'b01)) next_state<= password_correct;
            else next_state<= stop;
        end
   
        default: next_state<= idle;
   
    endcase
    end

    always@(posedge clk) begin
    case(current_state)
   
        idle: begin
            green_light<= 1'b0;
            red_light<= 1'b0;
            hex_1<= 7'b0000000; //0
            hex_2<= 7'b0000000; //0
        end
   
        wait_time_state: begin             green_light<= ~green_light;
            red_light<= 1'b0;
            hex_1<= 7'b1111001; //alphabet-E
            hex_2<= 7'b0110111; //N -> ENTER
        end
   
        password_correct: begin
            green_light<= 1'b1;
            red_light<= 1'b0;
            hex_1<= 7'b1111001; //6
            hex_2<= 7'b0000000; //0 -> GO
        end
   
        password_incorrect: begin            green_light<= 1'b0;
            red_light<= 1'b1;
            hex_1<= 7'b1111001; //E
            hex_2<= 7'b1111001; //E -> ERROR
        end
       
        stop: begin
            green_light<= 1'b0;
            red_light<= ~red_light;
            hex_1<= 7'b1101101; //5
            hex_2<= 7'b1110011; //P -> STOP
        end
   
    endcase
    end
endmodule


`timescale 1ns/1ps

module tb_car_parking();

  // DUT signals
  bit clk, rst;
  bit sense_entry, sense_exit;
  bit [1:0] password_1, password_2;
  bit green_light, red_light;
  bit [2:0] current_state, next_state;

  // Instantiate DUT
  car_parking_management inst (
    .clk(clk),
    .rst(rst),
    .sense_entry(sense_entry),
    .sense_exit(sense_exit),
    .password_1(password_1),
    .password_2(password_2),
    .green_light(green_light),
    .red_light(red_light),
    .space_available(space_available),
    .space_utilized(space_utilized),
    .count_cars(count_cars)
  );

  // Clock generation
  always #5 clk = ~clk;

  // Coverage class
  class car_parking_coverage;
    covergroup car_parking_cov;
      option.per_instance = 1;

      cp_state: coverpoint current_state {
        bins s_idle     = {3'b000};
        bins s_auth     = {3'b001};
        bins s_open     = {3'b010};
        bins s_wait     = {3'b011};
        bins s_exit     = {3'b100};
      }

      cp_entry: coverpoint sense_entry { bins zero = {0}; bins one = {1}; }
      cp_exit:  coverpoint sense_exit  { bins zero = {0}; bins one = {1}; }

      cp_password1: coverpoint password_1 { bins all[] = {[0:3]}; }
      cp_password2: coverpoint password_2 { bins all[] = {[0:3]}; }

      cp_green_light: coverpoint green_light { bins off = {0}; bins on = {1}; }
      cp_red_light:   coverpoint red_light   { bins off = {0}; bins on = {1}; }

      cross_inputs: cross cp_entry, cp_exit, cp_password1, cp_password2;
    endgroup

    // Transition coverage group
    covergroup transition_cov;
      coverpoint {prev_state, next_state} {
        bins s_idle_to_auth = (3'b000 => 3'b001);
        bins s_auth_to_open = (3'b001 => 3'b010);
        bins s_open_to_wait = (3'b010 => 3'b011);
        bins s_wait_to_exit = (3'b011 => 3'b100);
        bins s_exit_to_idle = (3'b100 => 3'b000);
      }
    endgroup

    bit [2:0] prev_state;

    function void sample_transition(bit [2:0] ps, bit [2:0] ns);
      prev_state = ps;
      transition_cov.sample();
    endfunction

    function new();
      car_parking_cov = new();
      transition_cov = new();
    endfunction
  endclass

  car_parking_coverage cov;

  // Stimulus and Coverage Collection
  initial begin
    $dumpfile("car_parking.vcd");
    $dumpvars(0, tb_car_parking);

    clk = 0;
    rst = 1;
    sense_entry = 0;
    sense_exit = 0;
    password_1 = 0;
    password_2 = 0;

    cov = new();

    #10 rst = 0;

    repeat (100) begin
      @(posedge clk);
      cov.sample_transition(current_state, next_state);

      // Trigger correct transitions first
      if (current_state == 3'b000) begin
        sense_entry = 1;
        password_1 = 2'b01;
        password_2 = 2'b01;
        sense_exit = 0;
      end else begin
        // Then randomized
        sense_entry = $urandom_range(0, 1);
        sense_exit = $urandom_range(0, 1);
        password_1 = $urandom_range(0, 3);
        password_2 = $urandom_range(0, 3);
      end

      cov.car_parking_cov.sample();
    end

    $display("Functional Coverage: %0.2f%%", cov.car_parking_cov.get_coverage());
    $finish;
  end

endmodule
