module traffic_light(hr,hy,hg,fr,fy,fg,st,ts,tl,c,rst,clk);
  output hr,hy,hg,fr,fy,fg;
  output reg st;
  input ts,tl,c,rst,clk;
  reg [1:0]state;

  parameter s0=2'b00,s1=2'b01,s2=2'b10,s3=2'b11;
  assign hg=s0;
  assign hw=s1;
  assign fg=s2;
  assign fy=s3;

  always@(posedge clk)
        begin 
          if(rst)
            begin
              state=hg;
              st=1;
            end
          else
            begin 
              st=0;
              case (state)
                hg:if(tl&c)  begin 
                  state =hy;
                  st=1;
                end
                hy:if (ts)begin
                  state =fg ;
                  st=1;
                end
                fg:if (tl|~c)begin
                  state =fy ;
                  st=1;
                end
                fy:if (ts)begin
                  state =hg ;
                  st=1;
                end
              endcase
            end 
        end
endmodule


module traffic_light_tb();
  
  bit hr,hy,hg,fr,fy,fg,st;
  bit ts,tl,c,rst,clk;
  logic [1:0]state;
  logic [3:0] transition;
  
  traffic_light inst (.hr(hr),.hy(hy),.hg(hg),.fr(fr),.fy(fy),.fg(fg),.st(st),.ts(ts),.tl(tl),.c(c),.rst(rst),.clk(clk));
  
    initial clk = 0;
  always #5 clk = ~clk;
  
  class traffic_light_coverage;
    covergroup traffic_light_cov @(posedge clk);
      option.per_instance = 1;
      
      input_state: coverpoint state{
        bins hg = {2'b00};
        bins hy = {2'b01};
        bins fg = {2'b10};
        bins fy = {2'b11};
      }
      
      input_ts: coverpoint ts{
        bins low = {0};
        bins high = {1};
      }
      
      input_tl: coverpoint tl{
        bins low = {0};
        bins high = {1};
      }
      
      input_c: coverpoint c{
        bins low = {0};
        bins high = {1};
      }
      
      cross_input: cross input_ts, input_tl, input_c;
      
      tr_transition: coverpoint transition{
        bins hg_to_hy = {4'b0001};
        bins hy_to_fg = {4'b0101};
        bins fg_to_fy = {4'b1010};
        bins fy_to_hg = {4'b1110};
      }
      
    endgroup 
    
    function new();
      traffic_light_cov = new();
    endfunction
    
    function void sample_transition(logic [1:0] from, logic [1:0] to);
    case ({from, to})
      {2'b00, 2'b01}: transition = 4'b0001; 
      {2'b01, 2'b10}: transition = 4'b0101; 
      {2'b10, 2'b11}: transition = 4'b1010; 
      {2'b11, 2'b00}: transition = 4'b1110; 
    endcase
  endfunction
    
  endclass
  
  traffic_light_coverage cov = new();
  logic [1:0] prev_state;

  initial begin
    cov = new();
  prev_state = 2'b00;

  rst = 1; @(posedge clk); rst = 0;

    repeat (100) begin
    @(posedge clk);
    prev_state = inst.state;

    tl = $urandom_range(0,1);
    ts = $urandom_range(0,1);
    c  = $urandom_range(0,1);

    state = inst.state;
    tl = tl;
    ts = ts;
    c  = c;
    cov.sample_transition(prev_state, inst.state);
  end

  $display("Coverage: %0.2f%%", cov.traffic_light_cov.get_coverage());
  $finish;
end
  
  initial begin
    $display("Dump started");
    $dumpfile("traffic_light.vcd");
    $dumpvars(0,traffic_light_tb);
  end
  
endmodule